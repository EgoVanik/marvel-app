{"version":3,"sources":["resources/img/mjolnir.png","components/randomChar/RandomChar.js","components/charList/CharList.js","components/charInfo/CharInfo.js","components/charSearchForm/charSearchForm.js","components/errorBoundary/ErrorBoundary.js","resources/img/vision.png","components/pages/MainPage.js","components/errorMessage/error.gif","components/errorMessage/ErrorMessage.js","services/MarvelService.js","hooks/http.hook.js","components/skeleton/Skeleton.js","utils/setContent.js"],"names":["View","data","name","description","thumbnail","homepage","wiki","imgStyle","className","src","alt","style","href","RandomChar","useState","char","setChar","useMarvelService","getCharacter","clearError","process","setProcess","useEffect","updateChar","timerId","setInterval","clearInterval","onCharLoaded","id","Math","floor","random","then","setContent","onClick","mjolnir","CharList","props","charList","setCharList","newItemLoading","setnewItemLoading","offset","setOffset","charEnded","setCharEnded","getAllCharacters","onRequest","initial","onCharListLoaded","newCharList","a","ended","length","itemRefs","useRef","focusOnItem","current","forEach","item","classList","remove","add","focus","elements","useMemo","Component","Spinner","ErrorMessage","Error","arr","items","map","i","CSSTransition","timeout","classNames","tabIndex","ref","el","onCharSelected","onKeyPress","e","key","TransitionGroup","component","renderItems","disabled","comics","imgObjFitStyle","resourceURI","target","CharInfo","charId","CharSearchForm","loading","error","getCharacterByName","errorMessage","results","to","initialValues","charName","validationSchema","Yup","required","onSubmit","htmlFor","type","placeholder","ErrorBoundary","state","errorInfo","console","log","this","setState","children","MainPage","selectedChar","onScroll","window","pageYOffset","addEventListener","removeEventListener","stickyF","Helmet","content","decoration","img","dislpay","width","height","objectFit","margin","request","useCallback","url","method","body","headers","fetch","response","ok","status","json","useHttp","_apiBase","_apiKey","res","_transformCharacter","getAllComics","_transformComics","getComic","slice","path","extension","urls","title","pageCount","language","textObjects","price","prices","Skeleton"],"mappings":"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","file":"static/js/6.2a95050f.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/mjolnir.61f31e18.png\";","import { useState, useEffect } from 'react';\nimport useMarvelService from '../../services/MarvelService';\nimport setContent from '../../utils/setContent';\n\nimport './randomChar.scss';\nimport mjolnir from '../../resources/img/mjolnir.png';\n\nconst RandomChar = () => {\n    const [char, setChar] = useState(null);\n\n    const {getCharacter, clearError, process, setProcess} = useMarvelService();\n\n    useEffect(() => {\n        updateChar();\n        const timerId = setInterval(updateChar, 300000);\n\n        return () => {\n            clearInterval(timerId)\n        }\n    }, [])\n\n    const onCharLoaded = (char) => {\n        setChar(char);\n    }\n\n    const updateChar = () => {\n        clearError();\n        const id = Math.floor(Math.random() * (1011400 - 1011000)) + 1011000;\n        getCharacter(id)\n            .then(onCharLoaded)//аргумент который придет из then будет подставляться в onCharLoaded. onCharloaded - ссылка на метод\n            .then(() => setProcess('confirmed'))\n    }\n\n\n    // const errorMessage = error ? <ErrorMessage/> : null; //если ошибка, отображаем gif с ошибкой\n    // const spinner = loading ? <Spinner/> : null; //*Условный рендеринг:  если загрузка, то возвращаем спиннер, если не загружается возвращаем view и как props передаем char \n    // const content = !(loading || error || !char) ? <View char={char}/> : null; // если нет загрузки или ошибки, рендерим компонент или возвращаем null\n\n    return (\n        <div className=\"randomchar\">\n            {/* {errorMessage}\n            {spinner}\n            {content} */}\n            {setContent(process, View, char)}\n            <div className=\"randomchar__static\">\n                <p className=\"randomchar__title\">\n                    Random character for today!<br/>\n                    Do you want to get to know him better?\n                </p>\n                <p className=\"randomchar__title\">\n                    Or choose another one\n                </p>\n                <button onClick={updateChar} className=\"button button__main\">\n                    <div className=\"inner\">try it</div>\n                </button>\n                <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\"/>\n            </div>\n        </div>\n    )\n}\n\n// простой рендерищий компонент\nconst View = ({data}) => {\n    const {name, description, thumbnail, homepage, wiki} = data;\n    let imgStyle = {'objectFit' : 'cover'};\n    if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n        imgStyle = {'objectFit' : 'contain'};\n    }\n\n    return (\n        <div className=\"randomchar__block\">\n            <img src={thumbnail} alt=\"Random character\" className=\"randomchar__img\" style={imgStyle}/>\n            <div className=\"randomchar__info\">\n                <p className=\"randomchar__name\">{name}</p>\n                <p className=\"randomchar__descr\">\n                    {description}\n                </p>\n                <div className=\"randomchar__btns\">\n                    <a href={homepage} className=\"button button__main\">\n                        <div className=\"inner\">homepage</div>\n                    </a>\n                    <a href={wiki} className=\"button button__secondary\">\n                        <div className=\"inner\">Wiki</div>\n                    </a>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default RandomChar;","import {useState, useEffect, useRef, useMemo} from 'react';\nimport PropTypes from 'prop-types';\nimport {CSSTransition, TransitionGroup} from 'react-transition-group';\n\nimport useMarvelService from '../../services/MarvelService';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\n\nimport './charList.scss';\n\n// своя ц-ия setContent - не из импорта!\nconst setContent = (process, Component, newItemLoading) => {\n    switch (process) {\n        case 'waiting':\n            return <Spinner/>;\n            break;\n\n        case 'loading':\n            return newItemLoading ? <Component/> : <Spinner/>;\n            break;\n\n        case 'confirmed':\n            return <Component/>;\n            break;\n\n        case 'error':\n            return <ErrorMessage/>;\n            break;\n    \n        default:\n            throw new Error('Unexpected process state');\n            break;\n    }\n}\n\nconst CharList = (props) => {\n\n    const [charList, setCharList] = useState([]);\n    const [newItemLoading, setnewItemLoading] = useState(false);\n    const [offset, setOffset] = useState(210);\n    const [charEnded, setCharEnded] = useState(false);\n    \n    const { getAllCharacters, process, setProcess} = useMarvelService();\n\n    useEffect(() => {\n        onRequest(offset, true);\n    }, [])\n\n    const onRequest = (offset, initial) => {\n        initial ? setnewItemLoading(false) : setnewItemLoading(true);\n        getAllCharacters(offset)\n            .then(onCharListLoaded)\n            .then(() => setProcess('confirmed'))\n    }\n\n    const onCharListLoaded = async(newCharList) => {\n        let ended = false;\n        if (newCharList.length < 9) {\n            ended = true;\n        }\n        setCharList([...charList, ...newCharList]);\n        setnewItemLoading(false);\n        setOffset(offset + 9);\n        setCharEnded(ended);\n    }\n\n    const itemRefs = useRef([]);\n\n    const focusOnItem = (id) => {\n        itemRefs.current.forEach(item => item.classList.remove('char__item_selected'));\n        itemRefs.current[id].classList.add('char__item_selected');\n        itemRefs.current[id].focus();\n    }\n\n    function renderItems (arr){\n        const items =  arr.map((item, i) => {\n            let imgStyle = {'objectFit' : 'cover'};\n            if (item.thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n                imgStyle = {'objectFit' : 'unset'};\n            }\n            \n            return (\n                <CSSTransition key={item.id} timeout={500} classNames=\"char__item\">\n                    <li \n                        className=\"char__item\"\n                        tabIndex={0}\n                        ref={el => itemRefs.current[i] = el}\n                        onClick={() => {\n                            props.onCharSelected(item.id);\n                            focusOnItem(i);\n                        }}\n                        onKeyPress={(e) => {\n                            if (e.key === ' ' || e.key === \"Enter\") {\n                                props.onCharSelected(item.id);\n                                focusOnItem(i);\n                            }\n                        }}>\n                            <img src={item.thumbnail} alt={item.name} style={imgStyle}/>\n                            <div className=\"char__name\">{item.name}</div>\n                    </li>\n                </CSSTransition>\n            )\n        });\n\n        return (\n            <ul className=\"char__grid\">\n                <TransitionGroup component={null}>\n                    {items}\n                </TransitionGroup>\n            </ul>\n        )\n    }\n    \n    // const items = renderItems(charList);\n\n    // const errorMessage = error ? <ErrorMessage/> : null;\n    // const spinner = loading && !newItemLoading ? <Spinner/> : null;\n\n// если использовать импортируемый setContent, то подгрузка персонажей ломается, т.к. это немного спецефичный компонент\n// мы напишем свою ф-цию setContent, которая будет немного отличаться\n\n// ф-цию setContent помещаем в useMemo чтобы не было багов с фокусоми и табом на клаве\n    const elements = useMemo(() => {\n        return setContent(process, () => renderItems(charList), newItemLoading);\n    // eslint-disable-next-line\n    }, [process]);\n\n    return (\n        <div className=\"char__list\">\n            {/* {errorMessage}\n            {spinner}\n            {items} */}\n            {/* {setContent(process, () => renderItems(charList), newItemLoading)} */}\n            {elements}\n            <button \n                disabled={newItemLoading} \n                style={{'display' : charEnded ? 'none' : 'block'}}\n                className=\"button button__main button__long\"\n                onClick={() => onRequest(offset)}>\n                <div className=\"inner\">load more</div>\n            </button>\n        </div>\n    )\n}\n\nCharList.propTypes = {\n    onCharSelected: PropTypes.func.isRequired\n}\n\nexport default CharList;","import { useState, useEffect } from 'react';\nimport useMarvelService from '../../services/MarvelService';\nimport PropTypes from 'prop-types';\nimport setContent from '../../utils/setContent';\n\nimport './charInfo.scss';\n\nconst CharInfo = (props) => {\n    const [char, setChar] = useState(null);\n\n    const {getCharacter, clearError, process, setProcess} = useMarvelService();\n\n    useEffect(() => {\n        updateChar();\n    }, [props.charId]);\n\n    const onCharLoaded = (char) => {\n        setChar(char);\n    }\n\n    const updateChar = () => {\n        clearError();\n        const {charId} = props;\n        if (!charId){\n            return;//если нет id, останавливаем\n        }\n\n        getCharacter(charId)\n            .then(onCharLoaded)\n            .then(() => setProcess('confirmed')) //fsm\n            // setProcess - ф-ция ручного изменения состония и мы её запускаем когда в компоненте данные получены\n        // this.foo.bar(); // для проверки ErrorBoundary\n    }\n\n    // const skeleton = char || loading || error ? null : <Skeleton/>\n    // const errorMessage = error ? <ErrorMessage/> : null;\n    // const spinner = loading ? <Spinner/> : null;\n    // const content = !(loading || error || !char) ? <View char={char}/> : null;\n\n    // fsm\n    // const setContent = (process, char) => {\n    //     switch (process) {\n    //         case 'waiting':\n    //             return <Skeleton/>;\n    //             break;\n\n    //         case 'loading':\n    //             return <Spinner/>;\n    //             break;\n\n    //         case 'confirmed':\n    //             return <View char={char}/>;\n    //             break;\n\n    //         case 'error':\n    //             return <ErrorMessage/>;\n    //             break;\n        \n    //         default:\n    //             throw new Error('Unexpected process state');\n    //             break;\n    //     }\n    // }\n\n    return (\n        <div className=\"char__info\">\n            {/* {skeleton}\n            {errorMessage}\n            {spinner}\n            {content} */}\n            {/* {setContent(process, char)} */}\n            {setContent(process, View, char)}\n        </div>\n    )\n}\n\nconst View = ({data}) => {\n    const {name, description, thumbnail, homepage, wiki, comics} = data;\n    \n    let imgObjFitStyle = {'objectFit': 'cover'};\n    if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n        imgObjFitStyle = {'objectFit': 'contain'};\n    }\n\n    return(\n        <>\n            <div className=\"char__basics\">\n                <img src={thumbnail} alt={name} style={imgObjFitStyle}/>\n                <div>\n                    <div className=\"char__info-name\">{name}</div>\n                    <div className=\"char__btns\">\n                        <a href={homepage} className=\"button button__main\">\n                            <div className=\"inner\">homepage</div>\n                        </a>\n                        <a href={wiki}className=\"button button__secondary\">\n                            <div className=\"inner\">wiki</div>\n                        </a>\n                    </div>\n                </div>\n            </div>\n            <div className=\"char__descr\">\n                {description}\n            </div>\n            <div className=\"char__comics\">Comics:</div>\n            <ul className=\"char__comics-list\">\n                {/* если нет комиксов, выводим сообщение */}\n                {comics.length > 0 ? null : 'There is no comics with this character'}\n                {\n                    comics.map((item, i) => {\n                        // eslint-disable-next-line\n                        if (i > 9) return; //если больше 10 комиксов, останаливаем\n                        return(\n                            <li key={i} className=\"char__comics-item\">\n                                <a href={item.resourceURI} target=\"_blank\">{item.name}</a>\n                            </li>\n                        )\n                    })\n                }\n            </ul>\n        </>\n    )\n}\n\nCharInfo.propTypes = {\n    charId: PropTypes.number\n}\n\nexport default CharInfo;","import {useState} from 'react';\nimport { Formik, Form, Field, ErrorMessage as FormikErrorMessage } from 'formik';\nimport * as Yup from 'yup';\nimport {Link} from 'react-router-dom';\n\nimport useMarvelService from '../../services/MarvelService';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\n\nimport './charSearchForm.scss';\n\nconst CharSearchForm = () => {\n    const [char, setChar] = useState(null);\n    const {loading, error, getCharacterByName, clearError} = useMarvelService();\n\n    const onCharLoaded = (char) => {\n        setChar(char);\n    }\n\n    const updateChar = (name) => {\n        clearError();\n\n        getCharacterByName(name)\n            .then(onCharLoaded);\n    }\n\n    const errorMessage = error ? <div className=\"char__search-critical-error\"><ErrorMessage /></div> : null;\n    const results = !char ? null : char.length > 0 ?\n                    <div className=\"char__search-wrapper\">\n                        <div className=\"char__search-success\">There is! Visit {char[0].name} page?</div>\n                        <Link to={`/characters/${char[0].id}`} className=\"button button__secondary\">\n                            <div className=\"inner\">To page</div>\n                        </Link>\n                    </div> : \n                    <div className=\"char__search-error\">\n                        The character was not found. Check the name and try again\n                    </div>;\n\n    return (\n        <div className=\"char__search-form\">\n            <Formik\n                initialValues = {{\n                    charName: ''\n                }}\n                validationSchema = {Yup.object({\n                    charName: Yup.string().required('This field is required')\n                })}\n                onSubmit = { ({charName}) => {\n                    updateChar(charName);\n                }}\n            >\n                <Form>\n                    <label className=\"char__search-label\" htmlFor=\"charName\">Or find a character by name:</label>\n                    <div className=\"char__search-wrapper\">\n                        <Field \n                            id=\"charName\" \n                            name='charName' \n                            type='text' \n                            placeholder=\"Enter name\"/>\n                        <button \n                            type='submit' \n                            className=\"button button__main\"\n                            disabled={loading}>\n                            <div className=\"inner\">find</div>\n                        </button>\n                    </div>\n                    <FormikErrorMessage component=\"div\" className=\"char__search-error\" name=\"charName\" />\n                </Form>\n            </Formik>\n            {results}\n            {errorMessage}\n        </div>\n    )\n}\n\nexport default CharSearchForm;","import { Component } from \"react\";\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\n\nclass ErrorBoundary extends Component {\n    state = {\n        error: false\n    }\n\n    componentDidCatch(error, errorInfo){\n        console.log(error, errorInfo);\n        this.setState({error: true})\n    }\n\n    render(){\n        // если ошибка - рендерим запасной интерфейс\n        if (this.state.error){\n            return <ErrorMessage/>\n        }\n\n        // если нет ошибки, рендерим структуру компонента, т.е. потомка, т.к. этот компонент обёртка\n        return this.props.children;\n    }\n}\nexport default ErrorBoundary;","export default __webpack_public_path__ + \"static/media/vision.067d4ae1.png\";","import { useState, useEffect } from \"react\";\nimport {Helmet} from 'react-helmet';\n\nimport RandomChar from \"../randomChar/RandomChar\";\nimport CharList from \"../charList/CharList\";\nimport CharInfo from \"../charInfo/CharInfo\";\nimport CharSearchForm from '../charSearchForm/charSearchForm';\nimport ErrorBoundary from \"../errorBoundary/ErrorBoundary\";\n\nimport decoration from '../../resources/img/vision.png';\n\nconst MainPage = () => {\n\n    const [selectedChar, setChar] = useState(null);\n    const [offset, setOffset] = useState(0);\n\n    const onCharSelected = (id) => {\n        setChar(id);\n    }\n\n    useEffect(() => {\n        const onScroll = () => setOffset(window.pageYOffset);\n        // console.log(offset);\n        window.addEventListener('scroll', onScroll);\n\n        return () => window.removeEventListener('scroll', onScroll);\n        // eslint-disable-next-line\n    },[offset])\n\n    let stickyF = 'c-sticky';\n    if(offset >= 450){\n        stickyF = 'c-fix'\n    }\n    \n    return (\n        <>\n            <Helmet>\n            <meta\n                name=\"description\"\n                content=\"Marvel information portal\"\n            />\n            <title>Marvel information portal</title>\n            </Helmet>\n            <ErrorBoundary>\n                <RandomChar/>\n            </ErrorBoundary>\n            <div className=\"char__content\">\n                <ErrorBoundary>\n                    <CharList onCharSelected={onCharSelected}/>\n                </ErrorBoundary>\n                <div className={stickyF} >\n                    <ErrorBoundary>\n                        <CharInfo charId={selectedChar}/>\n                    </ErrorBoundary>\n                    <ErrorBoundary>\n                        <CharSearchForm/>\n                    </ErrorBoundary>\n                </div>\n            </div>\n            <img className=\"bg-decoration\" src={decoration} alt=\"vision\"/>\n        </>\n    )\n}\n\nexport default MainPage;","export default __webpack_public_path__ + \"static/media/error.42292aa1.gif\";","import img from './error.gif';\n\nconst ErrorMessage = () => {\n    return(\n        <img src={img} alt=\"error-img\" style={{dislpay: 'block', width: '250px', height: '250px',\n            objectFit: 'contain', margin: '0 auto'}}/>\n    )\n}\nexport default ErrorMessage;","import {useHttp} from '../hooks/http.hook';\n\n// класс на чистом JS, без react\nconst useMarvelService = () => {\n    const {request, clearError, process, setProcess} = useHttp(); // вытаскиваем нужные переменные из кастомного хука\n\n    const _apiBase = 'https://gateway.marvel.com:443/v1/public/',\n          _apiKey = 'apikey=8ded7f8209284a69e53bdac48ccdeb83',\n          _baseOffset = 210;\n\n    const getAllCharacters = async (offset = _baseOffset) => {\n        const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`);\n        return res.data.results.map(_transformCharacter);\n    }\n\n    const getCharacterByName = async (name) => {\n        const res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`);\n        return res.data.results.map(_transformCharacter);\n    }\n\n    const getCharacter = async (id) => {\n        const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\n        return _transformCharacter(res.data.results[0]);\n    }\n\n    const getAllComics = async (offset = 0) => {\n        const res = await request(`${_apiBase}comics?orderBy=issueNumber&limit=8&offset=${offset}&${_apiKey}`);\n        return res.data.results.map(_transformComics);\n    }\n\n    const getComic = async (id) => {\n        const res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\n        return _transformComics(res.data.results[0]);\n    }\n\n    const _transformCharacter = (char) => {\n        return {\n            id: char.id,\n            name: char.name,\n            description: char.description ? `${char.description.slice(0, 210)}...` : 'There is no description for this character',\n            thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\n            homepage: char.urls[0].url,\n            wiki: char.urls[1].url,\n            comics: char.comics.items\n        }\n    }\n\n    const _transformComics = (comics) => {\n        return {\n            id: comics.id,\n            title: comics.title,\n            description: comics.description || 'There is no description',\n            pageCount: comics.pageCount ? `${comics.pageCount} p.` : 'No information about the number of pages',\n            thumbnail: comics.thumbnail.path + '.' + comics.thumbnail.extension,\n            language: comics.textObjects.language || 'en-us',\n            price: comics.prices.price ? `${comics.prices.price}$` : 'not available'\n        }\n    }\n\n    return {\n            clearError,\n            process,\n            setProcess,\n            getAllCharacters,\n            getCharacter,\n            getAllComics,\n            getComic,\n            getCharacterByName}\n}\n\nexport default useMarvelService;","import {useState, useCallback} from 'react';\n\nexport const useHttp = () => {\n    const [process, setProcess] = useState('waiting'); //fsm\n\n    const request = useCallback(async (url, method = 'GET', body = null, headers = {'Content-Type': 'application/json'}) => {\n        \n        setProcess('loading'); //при загрузке меняем процесс\n        try{\n            const response = await fetch(url, {method, body, headers});\n            // if error\n            if (!response.ok) {\n                throw new Error(`Could not fetch ${url}, status: ${response.status}`)\n            }\n\n            const data = await response.json();\n\n            return data; // возвращаем данные\n        } catch(e){\n            setProcess('error'); //sfm\n            throw e; // выкидываем ошибку\n        }\n    }, []);\n\n    const clearError = useCallback(() => {\n        setProcess('loading'); //при очищении ошибки делаем запрос заново\n    }, []); //очищаем ошибку чтобы дальше все работало и можно было сделать запрос\n    \n    //возвращаем все из кастомного хука \n    return {request, clearError, process, setProcess};\n}\n\n// process пробрасываем в MarvelService","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import Spinner from '../components/spinner/Spinner';\nimport ErrorMessage from '../components/errorMessage/ErrorMessage';\nimport Skeleton from '../components/skeleton/Skeleton';\n\nconst setContent = (process, Component, data) => {\n    switch (process) {\n        case 'waiting':\n            return <Skeleton/>;\n            break;\n\n        case 'loading':\n            return <Spinner/>;\n            break;\n\n        case 'confirmed':\n            return <Component data={data}/>;\n            break;\n\n        case 'error':\n            return <ErrorMessage/>;\n            break;\n    \n        default:\n            throw new Error('Unexpected process state');\n            break;\n    }\n}\nexport default setContent;"],"sourceRoot":""}