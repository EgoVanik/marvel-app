{"version":3,"sources":["components/pages/SinglePage.js","components/skeleton/Skeleton.js","utils/setContent.js"],"names":["SinglePage","Component","dataType","id","useParams","useState","data","setData","useMarvelService","getComic","getCharacter","clearError","process","setProcess","useEffect","updateData","then","onDataLoaded","Error","setContent","Skeleton","className","Spinner","ErrorMessage"],"mappings":"iLAsDeA,UA/CI,SAAC,GAA2B,IAA1BC,EAAyB,EAAzBA,UAAWC,EAAc,EAAdA,SACjBC,EAAMC,cAAND,GACP,EAAwBE,mBAAS,MAAjC,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAAmEC,cAA3DC,EAAR,EAAQA,SAAUC,EAAlB,EAAkBA,aAAcC,EAAhC,EAAgCA,WAAYC,EAA5C,EAA4CA,QAASC,EAArD,EAAqDA,WAErDC,qBAAU,WACNC,MACD,CAACZ,IAEJ,IAAMY,EAAa,WAGf,OAFAJ,IAEQT,GACJ,IAAK,QACDO,EAASN,GACRa,KAAKC,GACLD,MAAK,kBAAMH,EAAW,gBACvB,MACJ,IAAK,YACDH,EAAaP,GACZa,KAAKC,GACLD,MAAK,kBAAMH,EAAW,gBACvB,MACJ,QACI,MAAM,IAAIK,MAAM,yBAItBD,EAAe,SAACX,GAClBC,EAAQD,IAOZ,OACI,qCACI,cAAC,IAAD,IAICa,YAAWP,EAASX,EAAWK,Q,mEC9BjCc,EAjBE,WACb,OACI,qCACI,mBAAGC,UAAU,eAAb,0DACA,sBAAKA,UAAU,WAAf,UACI,sBAAKA,UAAU,yBAAf,UACI,qBAAKA,UAAU,2BACf,qBAAKA,UAAU,4BAEnB,qBAAKA,UAAU,0BACf,qBAAKA,UAAU,0BACf,qBAAKA,UAAU,iCCchBF,IAvBI,SAACP,EAASX,EAAWK,GACpC,OAAQM,GACJ,IAAK,UACD,OAAO,cAAC,EAAD,IAGX,IAAK,UACD,OAAO,cAACU,EAAA,EAAD,IAGX,IAAK,YACD,OAAO,cAACrB,EAAD,CAAWK,KAAMA,IAG5B,IAAK,QACD,OAAO,cAACiB,EAAA,EAAD,IAGX,QACI,MAAM,IAAIL,MAAM,+B","file":"static/js/8.db03b212.chunk.js","sourcesContent":["import { useParams } from 'react-router-dom';\nimport { useState, useEffect } from 'react';\nimport useMarvelService from '../../services/MarvelService';\nimport setContent from '../../utils/setContent';\n\nimport AppBanner from \"../appBanner/AppBanner\";\n\nconst SinglePage = ({Component, dataType}) => {\n        const {id} = useParams();\n        const [data, setData] = useState(null);\n        const { getComic, getCharacter, clearError, process, setProcess} = useMarvelService();\n\n        useEffect(() => {\n            updateData()\n        }, [id])\n\n        const updateData = () => {\n            clearError();\n\n            switch (dataType) {\n                case 'comic':\n                    getComic(id)\n                    .then(onDataLoaded)\n                    .then(() => setProcess('confirmed'))\n                    break;\n                case 'character':\n                    getCharacter(id)\n                    .then(onDataLoaded)\n                    .then(() => setProcess('confirmed'))\n                    break;\n                default:\n                    throw new Error('Someting goes wrong')\n            }\n        }\n\n        const onDataLoaded = (data) => {\n            setData(data);\n        }\n\n        // const errorMessage = error ? <ErrorMessage/> : null;\n        // const spinner = loading ? <Spinner/> : null;\n        // const content = !(loading || error || !data) ? <Component data={data}/> : null;\n\n        return (\n            <>\n                <AppBanner/>\n                {/* {errorMessage}\n                {spinner}\n                {content} */}\n                {setContent(process, Component, data)}\n            </>\n        )\n}\n\nexport default SinglePage;","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import Spinner from '../components/spinner/Spinner';\nimport ErrorMessage from '../components/errorMessage/ErrorMessage';\nimport Skeleton from '../components/skeleton/Skeleton';\n\nconst setContent = (process, Component, data) => {\n    switch (process) {\n        case 'waiting':\n            return <Skeleton/>;\n            break;\n\n        case 'loading':\n            return <Spinner/>;\n            break;\n\n        case 'confirmed':\n            return <Component data={data}/>;\n            break;\n\n        case 'error':\n            return <ErrorMessage/>;\n            break;\n    \n        default:\n            throw new Error('Unexpected process state');\n            break;\n    }\n}\nexport default setContent;"],"sourceRoot":""}